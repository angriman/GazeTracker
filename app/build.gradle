apply plugin: 'com.android.model.application'

def opencvdirectory = "/Users/Eugenio/AndroidStudioProjects/OpenCV-android-sdk/sdk/native"
def eigen3dir = "/home/matteo/Android/eigen-eigen-07105f7124f9"
def tbbdir = "/home/matteo/Android/tbb44_20160413oss"

model {

    repositories {
        libs(PrebuiltLibraries) {
            ocv_core {
                headers.srcDir "${opencvdirectory}/jni/include/opencv2/core"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${opencvdirectory}/libs/${targetPlatform.getName()}/libopencv_core.a")
                }
            }

            ocv_feature2d {
                headers.srcDir "${opencvdirectory}/jni/include/opencv2/features2d"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${opencvdirectory}/libs/${targetPlatform.getName()}/libopencv_features2d.a")
                }
            }

            ocv_imgproc {
                headers.srcDir "${opencvdirectory}/jni/include/opencv2/imgproc"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${opencvdirectory}/libs/${targetPlatform.getName()}/libopencv_imgproc.a")
                }
            }

            ocv_ml {
                headers.srcDir "${opencvdirectory}/jni/include/opencv2/ml"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${opencvdirectory}/libs/${targetPlatform.getName()}/libopencv_ml.a")
                }
            }

            ocv_java3 {
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file("${opencvdirectory}/libs/${targetPlatform.getName()}/libopencv_java3.so")
                }
            }
        }
    }

    android {
        compileSdkVersion = 23
        buildToolsVersion = "23.0.2"

        defaultConfig.with {
            applicationId = "com.teaminfernale.gazetracker"
            minSdkVersion.apiLevel = 19
            targetSdkVersion.apiLevel = 23
            versionCode = 1
            versionName = "1.0"
        }

        buildTypes {
            release {
                minifyEnabled = false
                proguardFiles.add(file('proguard-android.txt'))
            }
        }

        ndk {
            moduleName = "main-jni"
            toolchain = 'clang' //this option said what compiler to use
            stl = "gnustl_shared" //this option permits to include the static C++ standard library and others things ..(see http://developer.android.com/ndk/guides/cpp-support.html)
            cppFlags.add("-std=c++11")
       		cppFlags.add("-fexceptions")
      	    cppFlags.add("-I${file("src/main/jni/include")}".toString())
            ldLibs.add("android")
            ldLibs.add("EGL")
            ldLibs.add("GLESv2")
            ldLibs.add("dl")
            ldLibs.add("log")
            ldLibs.add("z")
            stl = "gnustl_shared"

           /* with {
                abiFilters.add("armeabi")
                File curDir = file('./')
                curDir = file(curDir.absolutePath)
                String libsDir = curDir.absolutePath+"/src/main/jniLibs/armeabi/"

                ldFlags.add(libsDir + "libopencv_core.a")
                ldFlags.add(libsDir + "libIlmImf.a")
                ldFlags.add(libsDir + "liblibjasper.a")
                ldFlags.add(libsDir + "liblibjpeg.a")
                ldFlags.add(libsDir + "liblibpng.a")
                ldFlags.add(libsDir + "liblibtiff.a")
                ldFlags.add(libsDir + "liblibwebp.a")
                ldFlags.add(libsDir + "libtbb.a")
                ldFlags.add(libsDir + "libopencv_calib3d.a")
                ldFlags.add(libsDir + "libopencv_features2d.a")
                ldFlags.add(libsDir + "libopencv_flann.a")
                ldFlags.add(libsDir + "libopencv_hal.a")
                ldFlags.add(libsDir + "libopencv_highgui.a")
                ldFlags.add(libsDir + "libopencv_imgcodecs.a")
                ldFlags.add(libsDir + "libopencv_imgproc.a")
                ldFlags.add(libsDir + "libopencv_ml.a")
                ldFlags.add(libsDir + "libopencv_objdetect.a")
                ldFlags.add(libsDir + "libopencv_photo.a")
                ldFlags.add(libsDir + "libopencv_shape.a")
                ldFlags.add(libsDir + "libopencv_stitching.a")
                ldFlags.add(libsDir + "libopencv_superres.a")
                ldFlags.add(libsDir + "libopencv_ts.a")
                ldFlags.add(libsDir + "libopencv_video.a")
                ldFlags.add(libsDir + "libopencv_videoio.a")
                ldFlags.add(libsDir + "libopencv_videostab.a")
                ldFlags.add(libsDir + "libopencv_java3.so")
            }

            with {
                abiFilters.add("armeabi-v7a")
                File curDir = file('./')
                curDir = file(curDir.absolutePath)
                String libsDir = curDir.absolutePath+"/src/main/jniLibs/armeabi-v7a/"

                ldFlags.add(libsDir + "libopencv_core.a")
                ldFlags.add(libsDir + "libIlmImf.a")
                ldFlags.add(libsDir + "liblibjasper.a")
                ldFlags.add(libsDir + "liblibjpeg.a")
                ldFlags.add(libsDir + "liblibpng.a")
                ldFlags.add(libsDir + "liblibtiff.a")
                ldFlags.add(libsDir + "liblibwebp.a")
                ldFlags.add(libsDir + "libtbb.a")
                ldFlags.add(libsDir + "libopencv_calib3d.a")
                ldFlags.add(libsDir + "libopencv_features2d.a")
                ldFlags.add(libsDir + "libopencv_flann.a")
                ldFlags.add(libsDir + "libopencv_hal.a")
                ldFlags.add(libsDir + "libopencv_highgui.a")
                ldFlags.add(libsDir + "libopencv_imgcodecs.a")
                ldFlags.add(libsDir + "libopencv_imgproc.a")
                ldFlags.add(libsDir + "libopencv_ml.a")
                ldFlags.add(libsDir + "libopencv_objdetect.a")
                ldFlags.add(libsDir + "libopencv_photo.a")
                ldFlags.add(libsDir + "libopencv_shape.a")
                ldFlags.add(libsDir + "libopencv_stitching.a")
                ldFlags.add(libsDir + "libopencv_superres.a")
                ldFlags.add(libsDir + "libopencv_ts.a")
                ldFlags.add(libsDir + "libopencv_video.a")
                ldFlags.add(libsDir + "libopencv_videoio.a")
                ldFlags.add(libsDir + "libopencv_videostab.a")
                ldFlags.add(libsDir + "libopencv_java3.so")

            }

            with {
                abiFilters.add("arm64-v8a")
                File curDir = file('./')
                curDir = file(curDir.absolutePath)
                String libsDir = curDir.absolutePath+"/src/main/jniLibs/arm64-v8a/"

                ldFlags.add(libsDir + "libopencv_core.a")
                ldFlags.add(libsDir + "libIlmImf.a")
                ldFlags.add(libsDir + "liblibjasper.a")
                ldFlags.add(libsDir + "liblibjpeg.a")
                ldFlags.add(libsDir + "liblibpng.a")
                ldFlags.add(libsDir + "liblibtiff.a")
                ldFlags.add(libsDir + "liblibwebp.a")
                ldFlags.add(libsDir + "libtbb.a")
                ldFlags.add(libsDir + "libopencv_calib3d.a")
                ldFlags.add(libsDir + "libopencv_features2d.a")
                ldFlags.add(libsDir + "libopencv_flann.a")
                ldFlags.add(libsDir + "libopencv_hal.a")
                ldFlags.add(libsDir + "libopencv_highgui.a")
                ldFlags.add(libsDir + "libopencv_imgcodecs.a")
                ldFlags.add(libsDir + "libopencv_imgproc.a")
                ldFlags.add(libsDir + "libopencv_ml.a")
                ldFlags.add(libsDir + "libopencv_objdetect.a")
                ldFlags.add(libsDir + "libopencv_photo.a")
                ldFlags.add(libsDir + "libopencv_shape.a")
                ldFlags.add(libsDir + "libopencv_stitching.a")
                ldFlags.add(libsDir + "libopencv_superres.a")
                ldFlags.add(libsDir + "libopencv_ts.a")
                ldFlags.add(libsDir + "libopencv_video.a")
                ldFlags.add(libsDir + "libopencv_videoio.a")
                ldFlags.add(libsDir + "libopencv_videostab.a")
                ldFlags.add(libsDir + "libopencv_java3.so")

            }
        
            with {
                abiFilters.add("x86")
                File curDir = file('./')
                curDir = file(curDir.absolutePath)
                String libsDir = curDir.absolutePath+"/src/main/jniLibs/x86/"

                ldFlags.add(libsDir + "libopencv_core.a")
                ldFlags.add(libsDir + "libIlmImf.a")
                ldFlags.add(libsDir + "liblibjasper.a")
                ldFlags.add(libsDir + "liblibjpeg.a")
                ldFlags.add(libsDir + "liblibpng.a")
                ldFlags.add(libsDir + "liblibtiff.a")
                ldFlags.add(libsDir + "liblibwebp.a")
                ldFlags.add(libsDir + "libtbb.a")
                ldFlags.add(libsDir + "libopencv_calib3d.a")
                ldFlags.add(libsDir + "libopencv_features2d.a")
                ldFlags.add(libsDir + "libopencv_flann.a")
                ldFlags.add(libsDir + "libopencv_hal.a")
                ldFlags.add(libsDir + "libopencv_highgui.a")
                ldFlags.add(libsDir + "libopencv_imgcodecs.a")
                ldFlags.add(libsDir + "libopencv_imgproc.a")
                ldFlags.add(libsDir + "libopencv_ml.a")
                ldFlags.add(libsDir + "libopencv_objdetect.a")
                ldFlags.add(libsDir + "libopencv_photo.a")
                ldFlags.add(libsDir + "libopencv_shape.a")
                ldFlags.add(libsDir + "libopencv_stitching.a")
                ldFlags.add(libsDir + "libopencv_superres.a")
                ldFlags.add(libsDir + "libopencv_ts.a")
                ldFlags.add(libsDir + "libopencv_video.a")
                ldFlags.add(libsDir + "libopencv_videoio.a")
                ldFlags.add(libsDir + "libopencv_videostab.a")
                ldFlags.add(libsDir + "libopencv_java3.so")

            }
            with {
                abiFilters.add("x86_64")
                File curDir = file('./')
                curDir = file(curDir.absolutePath)
                String libsDir = curDir.absolutePath+"/src/main/jniLibs/x86_64/"

                ldFlags.add(libsDir + "libopencv_core.a")
                ldFlags.add(libsDir + "libIlmImf.a")
                ldFlags.add(libsDir + "liblibjasper.a")
                ldFlags.add(libsDir + "liblibjpeg.a")
                ldFlags.add(libsDir + "liblibpng.a")
                ldFlags.add(libsDir + "liblibtiff.a")
                ldFlags.add(libsDir + "liblibwebp.a")
                ldFlags.add(libsDir + "libtbb.a")
                ldFlags.add(libsDir + "libopencv_calib3d.a")
                ldFlags.add(libsDir + "libopencv_features2d.a")
                ldFlags.add(libsDir + "libopencv_flann.a")
                ldFlags.add(libsDir + "libopencv_hal.a")
                ldFlags.add(libsDir + "libopencv_highgui.a")
                ldFlags.add(libsDir + "libopencv_imgcodecs.a")
                ldFlags.add(libsDir + "libopencv_imgproc.a")
                ldFlags.add(libsDir + "libopencv_ml.a")
                ldFlags.add(libsDir + "libopencv_objdetect.a")
                ldFlags.add(libsDir + "libopencv_photo.a")
                ldFlags.add(libsDir + "libopencv_shape.a")
                ldFlags.add(libsDir + "libopencv_stitching.a")
                ldFlags.add(libsDir + "libopencv_superres.a")
                ldFlags.add(libsDir + "libopencv_ts.a")
                ldFlags.add(libsDir + "libopencv_video.a")
                ldFlags.add(libsDir + "libopencv_videoio.a")
                ldFlags.add(libsDir + "libopencv_videostab.a")
                ldFlags.add(libsDir + "libopencv_java3.so")

            }
            with {
                abiFilters.add("mips")
                File curDir = file('./')
                curDir = file(curDir.absolutePath)
                String libsDir = curDir.absolutePath+"/src/main/jniLibs/mips/"

                ldFlags.add(libsDir + "libopencv_core.a")
                ldFlags.add(libsDir + "libIlmImf.a")
                ldFlags.add(libsDir + "liblibjasper.a")
                ldFlags.add(libsDir + "liblibjpeg.a")
                ldFlags.add(libsDir + "liblibpng.a")
                ldFlags.add(libsDir + "liblibtiff.a")
                ldFlags.add(libsDir + "liblibwebp.a")
                ldFlags.add(libsDir + "libtbb.a")
                ldFlags.add(libsDir + "libopencv_calib3d.a")
                ldFlags.add(libsDir + "libopencv_features2d.a")
                ldFlags.add(libsDir + "libopencv_flann.a")
                ldFlags.add(libsDir + "libopencv_hal.a")
                ldFlags.add(libsDir + "libopencv_highgui.a")
                ldFlags.add(libsDir + "libopencv_imgcodecs.a")
                ldFlags.add(libsDir + "libopencv_imgproc.a")
                ldFlags.add(libsDir + "libopencv_ml.a")
                ldFlags.add(libsDir + "libopencv_objdetect.a")
                ldFlags.add(libsDir + "libopencv_photo.a")
                ldFlags.add(libsDir + "libopencv_shape.a")
                ldFlags.add(libsDir + "libopencv_stitching.a")
                ldFlags.add(libsDir + "libopencv_superres.a")
                ldFlags.add(libsDir + "libopencv_ts.a")
                ldFlags.add(libsDir + "libopencv_video.a")
                ldFlags.add(libsDir + "libopencv_videoio.a")
                ldFlags.add(libsDir + "libopencv_videostab.a")
                ldFlags.add(libsDir + "libopencv_java3.so")

            }
            with {
                abiFilters.add("mips64")
                File curDir = file('./')
                curDir = file(curDir.absolutePath)
                String libsDir = curDir.absolutePath+"/src/main/jniLibs/mips64/"

                ldFlags.add(libsDir + "libopencv_core.a")
                ldFlags.add(libsDir + "libIlmImf.a")
                ldFlags.add(libsDir + "liblibjasper.a")
                ldFlags.add(libsDir + "liblibjpeg.a")
                ldFlags.add(libsDir + "liblibpng.a")
                ldFlags.add(libsDir + "liblibtiff.a")
                ldFlags.add(libsDir + "liblibwebp.a")
                ldFlags.add(libsDir + "libtbb.a")
                ldFlags.add(libsDir + "libopencv_calib3d.a")
                ldFlags.add(libsDir + "libopencv_features2d.a")
                ldFlags.add(libsDir + "libopencv_flann.a")
                ldFlags.add(libsDir + "libopencv_hal.a")
                ldFlags.add(libsDir + "libopencv_highgui.a")
                ldFlags.add(libsDir + "libopencv_imgcodecs.a")
                ldFlags.add(libsDir + "libopencv_imgproc.a")
                ldFlags.add(libsDir + "libopencv_ml.a")
                ldFlags.add(libsDir + "libopencv_objdetect.a")
                ldFlags.add(libsDir + "libopencv_photo.a")
                ldFlags.add(libsDir + "libopencv_shape.a")
                ldFlags.add(libsDir + "libopencv_stitching.a")
                ldFlags.add(libsDir + "libopencv_superres.a")
                ldFlags.add(libsDir + "libopencv_ts.a")
                ldFlags.add(libsDir + "libopencv_video.a")
                ldFlags.add(libsDir + "libopencv_videoio.a")
                ldFlags.add(libsDir + "libopencv_videostab.a")
                ldFlags.add(libsDir + "libopencv_java3.so")

            }*/
        }

        sources {
            main {
                jni {
                    dependencies {
                        library 'ocv_feature2d' linkage 'static'
                        library 'ocv_core' linkage 'static'
                        library 'ocv_imgproc' linkage 'static'
                        library 'ocv_ml' linkage 'static'
                        library 'ocv_java3' linkage 'shared'
                        //library 'tbblibrary' linkage 'shared'
                    }
                }
            }
        }

        buildTypes {
            release {
                minifyEnabled = false
                proguardFiles.add(file('proguard-rules.txt'))
            }
        }

        productFlavors {
            // for detailed abiFilter descriptions, refer to "Supported ABIs" @
            // https://developer.android.com/ndk/guides/abis.html#sa
            /*
             * Each combination of CPU and instruction sets has its own Application Binary Interface, or ABI
             *
             */
            create("arm") {
                ndk.abiFilters.add("armeabi")
            }
            create("arm7") {
                ndk.abiFilters.add("armeabi-v7a")
            }
            create("arm8") {
                ndk.abiFilters.add("arm64-v8a") // we have disabled it for linker problems
            }
            create("x86") {
                ndk.abiFilters.add("x86")
            }
            create("x86-64") {
                ndk.abiFilters.add("x86_64")
            }
            create("mips") {
                ndk.abiFilters.add("mips")
            }
            create("mips-64") {
                ndk.abiFilters.add("mips64")
            }
            // To include all cpu architectures, leaves abiFilters empty
            create("all")

        }
    }


}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.3.0'
    compile project(':opencv')
}
